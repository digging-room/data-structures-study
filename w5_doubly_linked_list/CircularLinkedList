package my.study.data_structuress.linkedlist.doubly

class CircularLinkedList {
    val head: Node = Node()
    //var size: Int = 0 // todo size 관리를 어떻게 한다는 지 모르겠음. 바로 이동연산을 해버리ㅕㄴ 안될텐데? 링크드리스트를 배열로 감싸는 것도 이상함

    // from 노드부터 to 노드까지의 노드를 position 노드 뒤로 이동시킴
    fun splice(from: Node, to:Node, position:Node) {
        // cut
        from.prev?.next = to.next
        to.next?.prev = from.prev

        // paste
        if (position.equals(head) && position.next == null) {
            position.prev = to
            to.next = position
            position.next = from
            from.prev = position
        }
        else {
            position.next?.prev = to
            to.next = position.next
            position.next = from
            from.prev = position
        }
    }

    fun moveAfter(target: Node, position:Node) {
        splice(target, target, position)
    }

    fun moveBefore(target: Node, position:Node) {
        splice(target, target, position.prev!!)
    }

    fun insertAfter(key:Any, position: Node) {
        //size++
        moveAfter(Node(key), position)
    }

    fun insertBefore(key:Any, position: Node) {
        //size--
        moveBefore(Node(key), position)
    }

    fun pushFront(key:Any) {
        insertAfter(Node(key), head)
    }

    fun pushBack(key:Any) {
        insertBefore(Node(key), head)
    }
}
